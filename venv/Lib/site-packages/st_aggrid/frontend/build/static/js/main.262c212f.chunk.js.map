{"version":3,"sources":["utils.js","AgGrid.tsx","index.tsx"],"names":["deepMap","obj","fn","deepMapper","val","Array","isArray","map","Object","keys","reduce","res","key","mapObject","AgGrid","props","frameDtypes","api","columnApi","columnFormaters","manualUpdateRequested","allowUnsafeJsCode","fitColumnsOnGridLoad","gridOptions","convertJavascriptCodeOnGridOptions","convertStringToFunction","render","undefined","state","should_update","setRowData","rowData","className","args","theme","style","defineContainerHeight","ManualUpdateButton","manual_update","onClick","e","returnGridValue","onGridReady","custom_css","css","styles","selector","prop","push","join","getCSS","styleSheet","document","createElement","type","innerText","console","log","head","appendChild","addCustomCSS","enable_enterprise_modules","ModuleRegistry","registerModules","AllModules","LicenseManager","setLicenseKey","AllCommunityModules","frame_dtypes","update_mode","allow_unsafe_jscode","fit_columns_on_grid_load","columnTypes","filter","filterParams","comparator","filterValue","cellValue","compareAsc","parseISO","valueFormatter","params","dateFormatter","value","column","colDef","custom_format_string","numberFormatter","precision","currencyFormatter","custom_currency_symbol","duration","humanize","assign","warn","JSON","parse","row_data","gridHeight","height","v","JS_PLACEHOLDER","match","RegExp","exec","funcStr","Function","this","updateMode","addEventListener","event","idx","setUpdateMode","fitColumns","selectIndex","sizeColumnsToFit","autoSizeAllColumns","isoString","formaterString","date","format","number","currencySymbol","n","Number","parseFloat","isNaN","toFixed","returnData","data_return_mode","forEachLeafNode","row","data","forEachNodeAfterFilter","group","forEachNodeAfterFilterAndSort","returnValue","originalDtypes","selectedRows","getSelectedRows","Streamlit","setComponentValue","width","reload_data","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.262c212f.chunk.js","sourcesContent":["// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\nfunction mapObject(obj, fn) {\n    return Object.keys(obj).reduce((res, key) => {\n        res[key] = fn(obj[key])\n        return res\n    }, {})\n}\n\nfunction deepMap(obj, fn) {\n    const deepMapper = (val) =>\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\n    if (Array.isArray(obj)) {\n        return obj.map(deepMapper)\n    }\n    if (typeof obj === \"object\") {\n        return mapObject(obj, deepMapper)\n    }\n    return obj\n}\n\nexport default deepMap\n","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection\n} from \"streamlit-component-lib\";\n\nimport { ReactNode } from \"react\"\n\nimport { AgGridReact } from '@ag-grid-community/react';\nimport { ColumnApi, GridApi } from '@ag-grid-community/core'\nimport { ModuleRegistry } from '@ag-grid-community/core';\nimport { AllCommunityModules } from '@ag-grid-community/all-modules'\nimport { AllModules } from '@ag-grid-enterprise/all-modules'\nimport { LicenseManager } from \"@ag-grid-enterprise/core\";\n\nimport { parseISO, compareAsc } from 'date-fns'\nimport { format } from 'date-fns-tz'\nimport deepMap from \"./utils\"\nimport { duration } from \"moment\";\n\nimport '@ag-grid-community/core/dist/styles/ag-theme-blue.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-fresh.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-material.css';\n\nimport './AgGrid.scss'\nimport './scrollbar.css'\n\ninterface State {\n  rowData: any\n  gridHeight: number\n  should_update: boolean\n}\n\ntype CSSDict = {[key: string]: {[key: string]: string}}\n\nfunction getCSS(styles: CSSDict): string {\n  var css = [];\n  for (let selector in styles) {\n    let style = selector + \" {\";\n    \n    for (let prop in styles[selector]) {\n      style += prop + \": \" + styles[selector][prop] + \";\";\n    }\n    \n    style += \"}\";\n    \n    css.push(style);\n  }\n  \n  return css.join(\"\\n\");\n}\n\nfunction addCustomCSS(custom_css: CSSDict): void {\n    var css = getCSS(custom_css)\n    var styleSheet = document.createElement(\"style\")\n    styleSheet.type = \"text/css\"\n    styleSheet.innerText = css\n    console.log(`Adding cutom css: `, css)\n    document.head.appendChild(styleSheet)\n}\n\nclass AgGrid extends StreamlitComponentBase<State> {\n  private frameDtypes: any\n  private api!: GridApi;\n  private columnApi!: ColumnApi\n  private columnFormaters: any\n  private manualUpdateRequested: boolean = false\n  private allowUnsafeJsCode: boolean = false\n  private fitColumnsOnGridLoad: boolean = false\n  private gridOptions: any\n\n  constructor(props: any) {\n    super(props)\n\n    if (props.args.custom_css) {\n      addCustomCSS(props.args.custom_css);\n    }\n\n    if (props.args.enable_enterprise_modules) {\n      ModuleRegistry.registerModules(AllModules);\n      if ('license_key' in props.args) {\n        LicenseManager.setLicenseKey(props.args['license_key']);\n      }\n    } else {\n      ModuleRegistry.registerModules(AllCommunityModules);\n    }\n\n    this.frameDtypes = this.props.args.frame_dtypes\n    this.manualUpdateRequested = (this.props.args.update_mode === 1)\n    this.allowUnsafeJsCode = this.props.args.allow_unsafe_jscode\n    this.fitColumnsOnGridLoad = this.props.args.fit_columns_on_grid_load\n    \n    this.columnFormaters = {\n      columnTypes: {\n        'dateColumnFilter': {\n          filter: 'agDateColumnFilter',\n          filterParams: {\n            comparator: (filterValue: any, cellValue: string) => compareAsc(parseISO(cellValue), filterValue)\n          }\n        },\n        'numberColumnFilter': {\n          filter: 'agNumberColumnFilter'\n        },\n        'shortDateTimeFormat': {\n          valueFormatter: (params: any) => this.dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\n        },\n        'customDateTimeFormat': {\n          valueFormatter: (params: any) => this.dateFormatter(params.value, params.column.colDef.custom_format_string),\n        },\n        'customNumericFormat': {\n          valueFormatter: (params: any) => this.numberFormatter(params.value, params.column.colDef.precision ?? 2),\n        },\n        'customCurrencyFormat': {\n          valueFormatter: (params: any) => this.currencyFormatter(params.value, params.column.colDef.custom_currency_symbol),\n        },\n        'timedeltaFormat': {\n          valueFormatter: (params: any) => duration(params.value).humanize(true)\n        },\n      }\n    }\n\n    let gridOptions = Object.assign({}, this.columnFormaters, this.props.args.gridOptions)\n\n    if (this.allowUnsafeJsCode) {\n      console.warn(\"flag allow_unsafe_jscode is on.\")\n      gridOptions = this.convertJavascriptCodeOnGridOptions(gridOptions)\n    }\n    this.gridOptions = gridOptions\n\n    this.state = {\n      rowData: JSON.parse(props.args.row_data),\n      gridHeight: this.props.args.height,\n      should_update: false\n    }\n  }\n\n  static getDerivedStateFromProps(props: any, state: any) {\n    if (props.args.reload_data) {\n\n      let new_row_data = JSON.parse(props.args.row_data)\n\n      return {\n        rowData: new_row_data,\n        gridHeight: props.args.height,\n        should_update: true\n      }\n    } else {\n      return {\n        gridHeight: props.args.height\n      }\n    }\n  }\n\n  private convertStringToFunction(v: string) {\n    const JS_PLACEHOLDER = \"--x_x--0_0--\"\n\n    let funcReg = new RegExp(\n      `${JS_PLACEHOLDER}\\\\s*(function\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\n    )\n\n    let match = funcReg.exec(v)\n\n    if (match) {\n      const funcStr = match[1]\n      // eslint-disable-next-line\n      return new Function(\"return \" + funcStr)()\n\n    } else {\n      return v\n    }\n  }\n\n  private convertJavascriptCodeOnGridOptions = (obj: object) => {\n    return deepMap(obj, this.convertStringToFunction)\n  }\n\n  private setUpdateMode() {\n    if (this.manualUpdateRequested) {\n      return //If manual update is set, no listeners will be added\n    }\n\n    let updateMode = this.props.args.update_mode\n\n    if ((updateMode & 2) === 2) {\n      this.api.addEventListener('cellValueChanged', (e: any) => this.returnGridValue(e))\n    }\n\n    if ((updateMode & 4) === 4) {\n      this.api.addEventListener('selectionChanged', (e: any) => this.returnGridValue(e))\n    }\n\n    if ((updateMode & 8) === 8) {\n      this.api.addEventListener('filterChanged', (e: any) => this.returnGridValue(e))\n    }\n\n    if ((updateMode & 16) === 16) {\n      this.api.addEventListener('sortChanged', (e: any) => this.returnGridValue(e))\n    }\n  }\n\n  private onGridReady(event: any) {\n    this.api = event.api\n    this.columnApi = event.columnApi\n\n    this.setUpdateMode()\n    this.api.addEventListener('firstDataRendered', (e: any) => this.fitColumns())\n\n    this.api.setRowData(this.state.rowData)\n\n    for (var idx in this.gridOptions['preSelectedRows']) {\n      this.api.selectIndex(this.gridOptions['preSelectedRows'][idx], true, true)\n    }\n  }\n\n  private fitColumns() {\n    if (this.fitColumnsOnGridLoad) {\n      this.api.sizeColumnsToFit()\n    }\n    else {\n      this.columnApi.autoSizeAllColumns()\n    }\n  }\n\n  private dateFormatter(isoString: string, formaterString: string): String {\n    try {\n      let date = parseISO(isoString)\n      return format(date, formaterString)\n    } catch {\n      return isoString\n    }\n    finally { }\n  }\n\n  private currencyFormatter(number: any, currencySymbol: string): String {\n    let n = Number.parseFloat(number)\n    if (!Number.isNaN(n)) {\n      return currencySymbol + n.toFixed(2)\n    } else {\n      return number\n    }\n  }\n\n  private numberFormatter(number: any, precision: number): String {\n    let n = Number.parseFloat(number)\n    if (!Number.isNaN(n)) {\n      return n.toFixed(precision)\n    } else {\n      return number\n    }\n  }\n\n  private returnGridValue(e: any) {\n    let returnData: any[] = []\n    let returnMode = this.props.args.data_return_mode\n\n    switch (returnMode) {\n      case 0: //ALL_DATA\n        this.api.forEachLeafNode((row) => returnData.push(row.data))\n        break;\n\n      case 1: //FILTERED_DATA\n        this.api.forEachNodeAfterFilter((row) => { if (!row.group) { returnData.push(row.data) } })\n        break;\n\n      case 2: //FILTERED_SORTED_DATA\n        this.api.forEachNodeAfterFilterAndSort((row) => { if (!row.group) { returnData.push(row.data) } })\n        break;\n    }\n\n    let returnValue = {\n      originalDtypes: this.frameDtypes,\n      rowData: returnData,\n      selectedRows: this.api.getSelectedRows()\n    }\n\n    Streamlit.setComponentValue(returnValue)\n  }\n\n  private ManualUpdateButton(props: any) {\n    if (props.manual_update) {\n      return (<button onClick={props.onClick}>Update</button>)\n    }\n    else {\n      return (<span></span>)\n    }\n  }\n\n  private defineContainerHeight() {\n    if ('domLayout' in this.gridOptions) {\n      if (this.gridOptions['domLayout'] === 'autoHeight') {\n        return ({\n          width: this.props.width\n        })\n      }\n    }\n    return ({\n      width: this.props.width,\n      height: this.state.gridHeight\n    })\n  }\n\n  public render = (): ReactNode => {\n\n    if (this.api !== undefined) {\n      if (this.state.should_update) {\n        this.api.setRowData(this.state.rowData)\n      }\n    }\n\n    return (\n      <div className={\"ag-theme-\"+ this.props.args.theme} style={this.defineContainerHeight()} >\n        <this.ManualUpdateButton manual_update={this.manualUpdateRequested} onClick={(e: any) => this.returnGridValue(e)} />\n        <AgGridReact\n          onGridReady={(e) => this.onGridReady(e)}\n          gridOptions={this.gridOptions}\n        >\n        </AgGridReact>\n      </div >\n    )\n  }\n}\n\nexport default withStreamlitConnection(AgGrid)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AgGrid from \"./AgGrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AgGrid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}